<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yarhl</name>
    </assembly>
    <members>
        <member name="T:Yarhl.AssemblyUtils">
            <summary>
            Utilities to work with Assemblies in different frameworks.
            </summary>
        </member>
        <member name="M:Yarhl.AssemblyUtils.LoadAssemblies(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load assemblies in different .NET implementations.
            </summary>
            <param name="paths">List of assemblies to load.</param>
            <returns>The assemblies.</returns>
        </member>
        <member name="M:Yarhl.AssemblyUtils.LoadAssembliesNetCore(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Load assemblies from .NET Core.
            </summary>
            <remarks>
            In .NET Core for some bugs / features we can't use the method
            Assembly.LoadFile because two identical types can return false in
            an equality. For that reason we need to load the assemblies with
            the AssemblyLoadContext which is only available in .NET Core.
            </remarks>
            <param name="paths">List of assemblies paths.</param>
            <returns>The load assemblies.</returns>
        </member>
        <member name="T:Yarhl.FileFormat.BinaryFormat">
            <summary>
            Binary format.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.BinaryFormat.#ctor(Yarhl.IO.DataStream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.BinaryFormat"/> class.
            </summary>
            <remarks>This format creates a substream from the provided stream.</remarks>
            <param name="stream">Binary stream.</param>
            <param name="offset">Offset from the DataStream start.</param>
            <param name="length">Length of the substream.</param>
        </member>
        <member name="M:Yarhl.FileFormat.BinaryFormat.#ctor(Yarhl.IO.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.BinaryFormat"/> class.
            </summary>
            <remarks>This format creates a substream from the provided stream.</remarks>
            <param name="stream">Binary stream.</param>
        </member>
        <member name="M:Yarhl.FileFormat.BinaryFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.BinaryFormat"/> class.
            Creates a stream in memory.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.BinaryFormat.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileFormat.BinaryFormat"/> class.
            </summary>
            <param name="filePath">The file path.</param>
        </member>
        <member name="P:Yarhl.FileFormat.BinaryFormat.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="M:Yarhl.FileFormat.BinaryFormat.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileFormat.BinaryFormat"/> object.
            </summary>
            <param name="disposing">
            If set to <c>true</c> free managed resources also.
            It happens from Dispose() calls.
            </param>
        </member>
        <member name="T:Yarhl.FileFormat.ConverterMetadata">
            <summary>
            Metadata associated to a IConverter interface.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.Name">
            <summary>
            Gets or sets the full name of the type. Shortcut of Type.FullName.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.Type">
            <summary>
            Gets or sets the type of class implemeting the converter.
            </summary>
            <value>Type of the converter.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.InternalSources">
            <summary>
            Gets or sets a single type or list of types that the converter
            can convert from.
            </summary>
            <value>Single or list of types for conversion.</value>
        </member>
        <member name="P:Yarhl.FileFormat.ConverterMetadata.InternalDestinations">
            <summary>
            Gets or sets a single type or list of types the converter can
            convert to.
            </summary>
            <value>Single or list of types the converter can convert to.</value>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.GetSources">
            <summary>
            Gets a list of source types that can convert from.
            </summary>
            <returns>List of source types that can convert from.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.GetDestinations">
            <summary>
            Gets a list of destination types it can convert to.
            </summary>
            <returns>Destination types it can convert to.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.CanConvert(System.Type)">
            <summary>
            Check if the associated converter can convert from a given type.
            It checks applying covariance rules.
            </summary>
            <param name="source">Source type for conversion.</param>
            <returns>If this converter can realize the operation.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.ConverterMetadata.CanConvert(System.Type,System.Type)">
            <summary>
            Check if the associated converter can convert from a given type
            into another. It checks applying covariance and contravariance
            rules.
            </summary>
            <param name="source">Source type for conversion.</param>
            <param name="dest">Destination type for conversion.</param>
            <returns>If this converter can realize the operation.</returns>
        </member>
        <member name="T:Yarhl.FileFormat.Format">
            <summary>
            Abstract file format.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.Format.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Yarhl.FileFormat.Format"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertTo``1(System.Object)">
            <summary>
            Converts the format to the specified type.
            </summary>
            <returns>The new format.</returns>
            <param name="source">Format to convert.</param>
            <typeparam name="TDst">The destination format type.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertTo``2(``1)">
            <summary>
            Converts the format to the specified type.
            </summary>
            <param name="source">Format to convert.</param>
            <typeparam name="TDst">The destination format type.</typeparam>
            <typeparam name="TSrc">The source format type.</typeparam>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertTo(System.Type,System.Object)">
            <summary>
            Converts the format into the specified type.
            </summary>
            <returns>The new format.</returns>
            <param name="dstType">Type of the destination format.</param>
            <param name="src">Format to convert.</param>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith``3(``1)">
            <summary>
            Converts the format using the specified converter type.
            </summary>
            <returns>The new format.</returns>
            <param name="source">Format to converter.</param>
            <typeparam name="TConv">Type of the converter.</typeparam>
            <typeparam name="TSrc">Type of the source format.</typeparam>
            <typeparam name="TDst">Type of the destination format.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith``2(Yarhl.FileFormat.IConverter{``0,``1},``0)">
            <summary>
            Converts the format using the specified converter.
            </summary>
            <returns>The new format.</returns>
            <param name="converter">Convert to use.</param>
            <param name="src">Format to convert.</param>
            <typeparam name="TSrc">Type of the source format.</typeparam>
            <typeparam name="TDst">The type of the destination format type.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith(System.Object,System.Object,System.Type)">
            <summary>
            Converts the format using the specified converter.
            </summary>
            <returns>The new format.</returns>
            <param name="converter">Converter to use.</param>
            <param name="src">Format to convert.</param>
            <param name="dstType">Type of the destination format.</param>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertTo``1">
            <summary>
            Converts into the specified type.
            </summary>
            <returns>The new format.</returns>
            <typeparam name="TDst">The type of the destination format.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertTo(System.Type)">
            <summary>
            Converts into the specified type.
            </summary>
            <returns>The new format.</returns>
            <param name="dstType">The type of the destination format.</param>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith``3">
            <summary>
            Converts using the specified converter.
            </summary>
            <typeparam name="TConv">The type of the converter to use.</typeparam>
            <typeparam name="TSrc">The type of the current format.</typeparam>
            <typeparam name="TDst">The type of the destination format.</typeparam>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith``2(Yarhl.FileFormat.IConverter{``0,``1})">
            <summary>
            Converts using the specified converter.
            </summary>
            <returns>The new format.</returns>
            <param name="converter">Converter to use.</param>
            <typeparam name="TSrc">The type of the current format.</typeparam>
            <typeparam name="TDst">The type of the destination format.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.Format.ConvertWith(System.Object,System.Type)">
            <summary>
            Converts using the specified converter.
            </summary>
            <param name="converter">Converter to use.</param>
            <param name="dstType">The type of the destination format.</param>
            <returns>The new format.</returns>
        </member>
        <member name="M:Yarhl.FileFormat.Format.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileFormat.Format"/> object.
            </summary>
        </member>
        <member name="M:Yarhl.FileFormat.Format.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileFormat.Format"/> object.
            </summary>
            <param name="disposing">
            If set to <c>true</c> free managed resources also.
            It happens from Dispose() calls.
            </param>
        </member>
        <member name="T:Yarhl.FileFormat.FormatMetadata">
            <summary>
            Metadata associated to a Format class.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.FormatMetadata.Name">
            <summary>
            Gets or sets the type full name. Shortcut of Type.FullName.
            </summary>
            <value>The full name of the type.</value>
        </member>
        <member name="P:Yarhl.FileFormat.FormatMetadata.Type">
            <summary>
            Gets or sets the type of the format.
            </summary>
            <value>The type of the format.</value>
        </member>
        <member name="T:Yarhl.FileFormat.IConverter">
            <summary>
            Non-generic converter interface.
            </summary>
        </member>
        <member name="T:Yarhl.FileFormat.IConverter`2">
            <summary>
            Format converter interface.
            </summary>
            <typeparam name="TSrc">Source format.</typeparam>
            <typeparam name="TDst">Destination format.</typeparam>
        </member>
        <member name="M:Yarhl.FileFormat.IConverter`2.Convert(`0)">
            <summary>
            Converts the specified source into the given type.
            </summary>
            <returns>The converted source.</returns>
            <param name="source">Source format to convert.</param>
        </member>
        <member name="T:Yarhl.FileFormat.IExportMetadata">
            <summary>
            Base metadata associated to a exported type.
            </summary>
        </member>
        <member name="P:Yarhl.FileFormat.IExportMetadata.Name">
            <summary>
            Gets or sets the name of the extension.
            Usually it's the FullName property of Type.
            </summary>
            <value>Name of the extension.</value>
        </member>
        <member name="P:Yarhl.FileFormat.IExportMetadata.Type">
            <summary>
            Gets or sets the type of the extension.
            </summary>
            <value>The type of the extension.</value>
        </member>
        <member name="T:Yarhl.FileSystem.NavigableNode`1">
            <summary>
            Node with navigation features inside a FileSystem.
            </summary>
            <typeparam name="T">The implementation of NavigableNodes.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.#ctor(System.String)">
            <summary>
            Initializes a new instance of the
            <see cref="T:Yarhl.FileSystem.NavigableNode`1"/> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Name">
            <summary>
            Gets the node name.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Path">
            <summary>
            Gets the path.
            </summary>
            <remarks>
            It includes the names of all the parent nodes and this node.
            </remarks>
            <value>The path.</value>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Parent">
            <summary>
            Gets the parent node.
            </summary>
            <value>The node parent.</value>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Children">
            <summary>
            Gets a read-only list of children nodes.
            </summary>
            <value>The list of children.</value>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Tags">
            <summary>
            Gets the dictionary of tags.
            </summary>
            <value>The tags.</value>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNode`1.Disposed">
            <summary>
            Gets a value indicating whether this node is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Add(`0)">
            <summary>
            Add a node.
            </summary>
            <remarks>
            Updates the parent of the child node to match this instance.
            If the node already contains a child with the same name it will be replaced.
            Otherwise the node is added.
            </remarks>
            <param name="node">Node to add.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Add a list of nodes.
            </summary>
            <param name="nodes">List of nodes to add.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.RemoveChildren">
            <summary>
            Removes all the children from the node.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileSystem.Node"/>
            object.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNode`1.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the
            <see cref="T:Yarhl.FileSystem.NavigableNode`1"/> object.
            </summary>
            <param name="freeManagedResourcesAlso">If set to <c>true</c> free
            managed resources also.</param>
        </member>
        <member name="T:Yarhl.FileSystem.NavigableNodeCollection`1">
            <summary>
            Read-only collection of NavigableNodes.
            </summary>
            <typeparam name="T">The implementation of NavigableNodes.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.NavigableNodeCollection`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the
            <see cref="T:Yarhl.FileSystem.NavigableNodeCollection`1"/> class.
            </summary>
            <param name="list">Original list of nodes.</param>
        </member>
        <member name="P:Yarhl.FileSystem.NavigableNodeCollection`1.Item(System.String)">
            <summary>
            Gets the <see cref="T:Yarhl.FileSystem.NavigableNodeCollection`1"/>
            with the specified name.
            </summary>
            <param name="name">Node name.</param>
            <returns>The node with the same name or null if not found.</returns>
        </member>
        <member name="T:Yarhl.FileSystem.NavigationMode">
            <summary>
            Navigation mode through a file system.
            </summary>
        </member>
        <member name="F:Yarhl.FileSystem.NavigationMode.BreadthFirst">
            <summary>
            Breadth-First Search.
            Returns first nodes in the same directory.
            </summary>
        </member>
        <member name="F:Yarhl.FileSystem.NavigationMode.DepthFirst">
            <summary>
            Depth-First Search.
            Return first nodes in sub-directories.
            </summary>
        </member>
        <member name="T:Yarhl.FileSystem.Navigator">
            <summary>
            FileSystem navigator.
            Search for nodes and iterate over them.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.Navigator.SearchFile``1(``0,System.String)">
            <summary>
            Search a node by path.
            </summary>
            <param name="rootNode">The root node to start the search.</param>
            <param name="path">Path to search.</param>
            <returns>Node or null if not found.</returns>
            <typeparam name="T">NavigableNode type.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Navigator.IterateNodes``1(``0,Yarhl.FileSystem.NavigationMode)">
            <summary>
            Iterates the nodes recursively.
            </summary>
            <param name="rootNode">The root node to start iterating.</param>
            <param name="mode">The navigation mode.</param>
            <returns>The nodes.</returns>
            <typeparam name="T">NavigableNode type.</typeparam>
        </member>
        <member name="T:Yarhl.FileSystem.Node">
            <summary>
            Node in the FileSystem with an associated format.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.Node.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.Node"/> class.
            </summary>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.#ctor(System.String,Yarhl.FileFormat.Format)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.Node"/> class.
            </summary>
            <param name="name">Node name.</param>
            <param name="initialFormat">Node format.</param>
        </member>
        <member name="P:Yarhl.FileSystem.Node.Format">
            <summary>
            Gets or sets the current format of the node.
            </summary>
            <value>The current format.</value>
        </member>
        <member name="P:Yarhl.FileSystem.Node.Stream">
            <summary>
            Gets the node associated DataStream if the format is BinaryFormat.
            </summary>
            <value>
            DataStream if the format is BinaryFormat, null otherwise.
            </value>
        </member>
        <member name="P:Yarhl.FileSystem.Node.IsContainer">
            <summary>
            Gets a value indicating whether the format is a container of subnodes.
            </summary>
            <value><c>true</c> if is container; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Yarhl.FileSystem.Node.GetFormatAs``1">
            <summary>
            Gets the format as the specified type.
            </summary>
            <returns>The format casted to the type or null if not possible.</returns>
            <typeparam name="T">The format type.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Transform(System.Type,System.Object)">
            <summary>
            Transforms the node format to the specified format.
            </summary>
            <returns>This node.</returns>
            <param name="dst">Format to convert.</param>
            <param name="converter">The format converter to use.</param>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Transform``1">
            <summary>
            Transforms the node format to the specified format.
            </summary>
            <returns>This node.</returns>
            <typeparam name="T">The new node format.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Transform``3">
            <summary>
            Transform the node format to another format with a converter of that type.
            </summary>
            <returns>This node.</returns>
            <typeparam name="TConv">The type of the converter to use.</typeparam>
            <typeparam name="TSrc">The type of the current format.</typeparam>
            <typeparam name="TDst">The type of the new format.</typeparam>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Transform``2(Yarhl.FileFormat.IConverter{``0,``1})">
            <summary>
            Transform the node format to another format using a converter.
            </summary>
            <param name="converter">Convert to use.</param>
            <typeparam name="TSrc">The type of the source format.</typeparam>
            <typeparam name="TDst">The type of the destination format.</typeparam>
            <returns>This node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.Node.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.FileSystem.Node"/>
            object.
            </summary>
            <param name="freeManagedResourcesAlso">If set to <c>true</c> free
            managed resources also.</param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeContainerFormat">
            <summary>
            Node container format for unpack / pack files.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/>
            class.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NodeContainerFormat.Root">
            <summary>
            Gets the root node containing the children.
            </summary>
            <value>The root node.</value>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.MoveChildrenTo(Yarhl.FileSystem.Node)">
            <summary>
            Moves the children from this format to a <see cref="T:Yarhl.FileSystem.Node"/>.
            </summary>
            <remarks>
            The node will handle the lifecycle of the children.
            Disposing the format won't dispose the children.
            </remarks>
            <param name="newNode">Node that will contain the children.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeContainerFormat.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the
            <see cref="T:Yarhl.FileSystem.NodeContainerFormat"/> object.
            </summary>
            <param name="disposing">
            If set to <c>true</c> free managed resources also.
            It happens from Dispose() calls.
            </param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeFactory">
            <summary>
            Node factory.
            </summary>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.CreateContainer(System.String)">
            <summary>
            Creates a new <see cref="T:Yarhl.FileSystem.Node"/> with a new NodeContainer format.
            </summary>
            <returns>The new node.</returns>
            <param name="name">Node name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.CreateContainersForChild(Yarhl.FileSystem.Node,System.String,Yarhl.FileSystem.Node)">
            <summary>
            Creates the missing parent nodes to contain the child and add it.
            </summary>
            <param name="root">The root node that will contain the nodes.</param>
            <param name="path">
            The path for the child. It doesn't contain the root or child names.</param>
            <param name="child">The child to add to root with the path.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromMemory(System.String)">
            <summary>
            Creates a Node with a new stream from memory.
            </summary>
            <param name="name">The name of the node.</param>
            <returns>The new node.</returns>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromFile(System.String)">
            <summary>
            Creates a Node from a file.
            </summary>
            <returns>The node.</returns>
            <param name="filePath">File path.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromFile(System.String,System.String)">
            <summary>
            Creates a Node from a file.
            </summary>
            <returns>The node.</returns>
            <param name="filePath">File path.</param>
            <param name="nodeName">Node name.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.String)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
        </member>
        <member name="M:Yarhl.FileSystem.NodeFactory.FromDirectory(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a Node containing all the files from the directory.
            </summary>
            <returns>The container node.</returns>
            <param name="dirPath">Directory path.</param>
            <param name="filter">Filter for files in directory.</param>
            <param name="nodeName">Node name.</param>
            <param name="subDirectories">
            If <c>true</c> it searchs recursively in subdirectories.
            </param>
        </member>
        <member name="T:Yarhl.FileSystem.NodeSystem">
            <summary>
            Basic settings and configurations for a system of nodes.
            </summary>
        </member>
        <member name="P:Yarhl.FileSystem.NodeSystem.PathSeparator">
            <summary>
            Gets the path separator.
            </summary>
            <value>The path separator.</value>
        </member>
        <member name="T:Yarhl.IO.DataReader">
            <summary>
            Binary DataReader for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataReader.#ctor(Yarhl.IO.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <remarks>
            By default the endianness is LittleEndian and the encoding is UTF-8.
            </remarks>
        </member>
        <member name="P:Yarhl.IO.DataReader.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Yarhl.IO.DataReader.Endianness">
            <summary>
            Gets or sets the endianness.
            </summary>
            <value>The endianness.</value>
        </member>
        <member name="P:Yarhl.IO.DataReader.DefaultEncoding">
            <summary>
            Gets or sets the default encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadByte">
            <summary>
            Reads a 8-bit byte number.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadSByte">
            <summary>
            Reads a signed 8-bit byte number.
            </summary>
            <returns>The next signed byte.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt16">
            <summary>
            Reads an unsigned 16-bit number.
            </summary>
            <returns>The next 16-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt16">
            <summary>
            Reads a signed 16-bit number.
            </summary>
            <returns>The next signed 16-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt24">
            <summary>
            Reads a 24-bit number.
            </summary>
            <returns>The next 24-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt32">
            <summary>
            Reads an unsigned 32-bit number.
            </summary>
            <returns>The next unsigned 32-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt32">
            <summary>
            Reads a signed 32-bit number.
            </summary>
            <returns>The next signed 32-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadUInt64">
            <summary>
            Reads an unsigned 64-bit number.
            </summary>
            <returns>The next unsigned 64-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadInt64">
            <summary>
            Reads a signed 64-bit number.
            </summary>
            <returns>The next signed 64-bit number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadSingle">
            <summary>
            Reads a 32-bits IEEE 754 single precision floating-point number.
            </summary>
            <returns>The next float number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadDouble">
            <summary>
            Reads a 64-bits IEEE 754 double precision floating-point number.
            </summary>
            <returns>The next double number.</returns>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadBytes(System.Int32)">
            <summary>
            Reads bytes from the stream.
            </summary>
            <returns>The bytes read.</returns>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadChar(System.Text.Encoding)">
            <summary>
            Reads a char.
            </summary>
            <returns>The next char.</returns>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadChars(System.Int32,System.Text.Encoding)">
            <summary>
            Reads an array of chars.
            </summary>
            <returns>The chars read.</returns>
            <param name="count">The number of chars to read.</param>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Text.Encoding)">
            <summary>
            Reads a string that ends with the null terminator.
            </summary>
            <returns>The string.</returns>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a string with a constant size.
            </summary>
            <returns>The string.</returns>
            <param name="bytesCount">Size of the string in bytes.</param>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadString(System.Type,System.Text.Encoding)">
            <summary>
            Reads the size with a size field first.
            </summary>
            <returns>The string.</returns>
            <param name="sizeType">Type of the size field.</param>
            <param name="encoding">Optional encoding to use.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadByType(System.Type)">
            <summary>
            Reads a field by type.
            </summary>
            <returns>The field.</returns>
            <param name="type">Type of the field.</param>
        </member>
        <member name="M:Yarhl.IO.DataReader.Read``1">
            <summary>
            Read a field by type.
            </summary>
            <returns>The field.</returns>
            <typeparam name="T">The type of the field.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataReader.ReadPadding(System.Int32,System.Boolean)">
            <summary>
            Reads bytes to padd the position in the stream.
            </summary>
            <param name="padding">Padding value.</param>
            <param name="absolutePadding">
            If set to <c>true</c> absolute position in the stream.
            </param>
        </member>
        <member name="T:Yarhl.IO.DataStream">
            <summary>
            Data stream.
            </summary>
            <remarks>
            Custom implementation of a Stream based on System.IO.Stream.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
            <param name="stream">Base stream.</param>
            <param name="offset">Offset from the base stream origin.</param>
            <param name="length">
            Length of this DataStream.
            If it's -1 then it takes the stream length.
            </param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
            <param name="stream">Base stream.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.String,Yarhl.IO.FileOpenMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
            <param name="filePath">File path.</param>
            <param name="mode">File open mode.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(System.String,System.Int64,System.Int64,Yarhl.IO.FileOpenMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
            <param name="filePath">File path.</param>
            <param name="offset">Offset from the start of the file.</param>
            <param name="length">
            Length of this DataStream.
            If it's -1 then it takes the file length.
            </param>
            <param name="mode">File open mode.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.#ctor(Yarhl.IO.DataStream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataStream"/> class.
            </summary>
            <param name="stream">Base stream.</param>
            <param name="offset">Offset from the DataStream start.</param>
            <param name="length">
            Length of this DataStream.
            If it's -1 then it takes the stream length.
            </param>
        </member>
        <member name="P:Yarhl.IO.DataStream.ActiveStreams">
            <summary>
            Gets the number of streams in use.
            </summary>
            <value>The active streams number.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.Disposed">
            <summary>
            Gets a value indicating whether this <see cref="T:Yarhl.IO.DataStream"/> is disposed.
            </summary>
            <value><c>true</c> if disposed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.Offset">
            <summary>
            Gets the offset from the BaseStream.
            </summary>
            <value>The offset.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.Position">
            <summary>
            Gets or sets the position from the start of this stream.
            </summary>
            <value>The position.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.Length">
            <summary>
            Gets or sets the length of this stream.
            If the value set is -1, then the length is taken from the BaseStream.
            </summary>
            <value>The length.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.ParentDataStream">
            <summary>
            Gets the parent DataStream.
            </summary>
            <value>The parent DataStream.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.BaseStream">
            <summary>
            Gets the base stream.
            </summary>
            <value>The base stream.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.EndOfStream">
            <summary>
            Gets a value indicating whether the position is at end of the stream.
            </summary>
            <value><c>true</c> if end of stream; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Yarhl.IO.DataStream.AbsolutePosition">
            <summary>
            Gets the position from the base stream.
            </summary>
            <value>The absolute position.</value>
        </member>
        <member name="M:Yarhl.IO.DataStream.Dispose">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.DataStream"/> object.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.Seek(System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Move the position of the Stream.
            </summary>
            <param name="shift">Distance to move position.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.PushToPosition(System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Push the current position into a stack and move to a new one.
            </summary>
            <param name="shift">Distance to move position.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.PushCurrentPosition">
            <summary>
            Push the current position into a stack.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.PopPosition">
            <summary>
            Pop the last position from the stack and move to it.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataStream.RunInPosition(System.Action,System.Int64,Yarhl.IO.SeekMode)">
            <summary>
            Run a method in a specific position.
            This command will move into the position, run the method and return
            to the current position.
            </summary>
            <param name="action">Action to run.</param>
            <param name="position">Position to move.</param>
            <param name="mode">Mode to move position.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.ReadByte">
            <summary>
            Reads the next byte.
            </summary>
            <returns>The next byte.</returns>
        </member>
        <member name="M:Yarhl.IO.DataStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads from the stream to the buffer.
            </summary>
            <returns>The number of bytes read.</returns>
            <param name="buffer">Buffer to copy data.</param>
            <param name="index">Index to start copying in buffer.</param>
            <param name="count">Number of bytes to read.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.ReadFormat``1">
            <summary>
            Reads a format from this stream.
            </summary>
            <returns>The format read.</returns>
            <typeparam name="T">The type of the format to read.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the a portion of the buffer to the stream.
            </summary>
            <param name="buffer">Buffer to write.</param>
            <param name="index">Index in the buffer.</param>
            <param name="count">Bytes to write.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteTo(System.String)">
            <summary>
            Writes the stream into a file.
            </summary>
            <param name="fileOut">Output file path.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.WriteTo(Yarhl.IO.DataStream)">
            <summary>
            Writes the stream into another DataStream.
            </summary>
            <param name="stream">Output DataStream.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Compare(Yarhl.IO.DataStream)">
            <summary>
            Compare the content of the stream with another one.
            </summary>
            <returns>The result of the comparaison.</returns>
            <param name="otherStream">Stream to compare with.</param>
        </member>
        <member name="M:Yarhl.IO.DataStream.Dispose(System.Boolean)">
            <summary>
            Releases all resource used by the <see cref="T:Yarhl.IO.DataStream"/>
            object.
            </summary>
            <param name="freeManagedResourcesAlso">If set to <c>true</c> free
            managed resources also.</param>
        </member>
        <member name="T:Yarhl.IO.DataWriter">
            <summary>
            Binary writer for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.DataWriter.#ctor(Yarhl.IO.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.DataWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <remarks>
            By default the endianess is LittleEndian and the encoding is UTF-8.
            </remarks>
        </member>
        <member name="P:Yarhl.IO.DataWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Yarhl.IO.DataWriter.Endianness">
            <summary>
            Gets or sets the endianness.
            </summary>
            <value>The endianness.</value>
        </member>
        <member name="P:Yarhl.IO.DataWriter.DefaultEncoding">
            <summary>
            Gets or sets the default encoding.
            </summary>
            <value>The default encoding.</value>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Byte)">
            <summary>
            Write the specified 8-bits byte value.
            </summary>
            <param name="val">Byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.SByte)">
            <summary>
            Write the specified 8-bits signed byte value.
            </summary>
            <param name="val">Signed byte value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int16)">
            <summary>
            Write the specified 16-bits signed value.
            </summary>
            <param name="val">16-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt16)">
            <summary>
            Write the specified 16-bits unsigned value.
            </summary>
            <param name="val">16-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int32)">
            <summary>
            Write the specified 32-bits signed value.
            </summary>
            <param name="val">32-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt32)">
            <summary>
            Write the specified 32-bits unsigned value.
            </summary>
            <param name="val">32-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Int64)">
            <summary>
            Write the specified 64-bits signed value.
            </summary>
            <param name="val">64-bits signed value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.UInt64)">
            <summary>
            Write the specified 64-bits unsigned value.
            </summary>
            <param name="val">64-bits unsigned value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Single)">
            <summary>
            Write the specified 32-bits IEEE 754 single precision
            floating point value.
            </summary>
            <param name="val">Single precision floating point value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Double)">
            <summary>
            Write the specified 64-bits IEEE 754 double precision
            floating point value.
            </summary>
            <param name="val">Double precision floating point value.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Byte[])">
            <summary>
            Write the specified byte buffer.
            </summary>
            <param name="buffer">Byte buffer.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Char,System.Text.Encoding)">
            <summary>
            Write the specified char using a text encoding.
            </summary>
            <param name="ch">Char to write.</param>
            <param name="encoding">Optional text encoding to use.</param>
            <remarks>If the encoding is null, it will use the default encoding.</remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.Char[],System.Text.Encoding)">
            <summary>
            Write the specified chars using a text encoding.
            </summary>
            <param name="chars">Chara array to write.</param>
            <param name="encoding">Optional text encoding to use.</param>
            <remarks>If the encoding is null, it will use the default encoding.</remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="nullTerminator">If set to <c>true</c> add null terminator.</param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>If the encoding is null, it will use the default encoding.</remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Int32,System.Boolean,System.Text.Encoding)">
            <summary>
            Write a text string with a fixed size.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="fixedSize">Fixed size of the encoded string in bytes.</param>
            <param name="nullTerminator">If set to <c>true</c> add null terminator.</param>
            <param name="encoding">Text encoding to use.</param>
            <remarks>If the encoding is null, it will use the default encoding.</remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.Write(System.String,System.Type,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Write a text string and its size.
            </summary>
            <param name="text">Text string to write.</param>
            <param name="sizeType">Type of the string size to write.</param>
            <param name="nullTerminator">If set to <c>true</c> add null terminator.</param>
            <param name="encoding">Text encoding to use.</param>
            <param name="maxSize">Maximum size of the encoded string in bytes.</param>
            <remarks>If the encoding is null, it will use the default encoding.</remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteOfType(System.Type,System.Object)">
            <summary>
            Write the specified value converting to any supported type.
            </summary>
            <param name="type">Type of the value.</param>
            <param name="val">Value to write.</param>
            <remarks>
            The supported types are: long, ulong, int, uint, short, ushort, byte, sbyte,
            char and string.
            </remarks>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteOfType``1(``0)">
            <summary>
            Write the specified value forcing the type in the generic.
            </summary>
            <param name="val">Value to write.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteTimes(System.Byte,System.Int64)">
            <summary>
            Writes the same byte the specified number of times.
            </summary>
            <param name="val">Value to write.</param>
            <param name="times">Number of times to write the byte.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WriteUntilLength(System.Byte,System.Int64)">
            <summary>
            Writes the same byte until the given stream length is reached.
            </summary>
            <param name="val">Value to repeat.</param>
            <param name="length">Stream length to reach.</param>
        </member>
        <member name="M:Yarhl.IO.DataWriter.WritePadding(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Write the same byte to padd the stream.
            </summary>
            <param name="val">Value to repeat.</param>
            <param name="padding">Padding value.</param>
            <param name="absolutePadding">
            If set to <c>true</c> pad using the absolute position in the stream.
            </param>
        </member>
        <member name="T:Yarhl.IO.EndiannessMode">
            <summary>
            Endianness mode.
            </summary>
        </member>
        <member name="F:Yarhl.IO.EndiannessMode.LittleEndian">
            <summary>
            Little endian.
            </summary>
        </member>
        <member name="F:Yarhl.IO.EndiannessMode.BigEndian">
            <summary>
            Big endian.
            </summary>
        </member>
        <member name="T:Yarhl.IO.FileOpenMode">
            <summary>
            Mode to open files.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Read">
            <summary>
            Open the file for reading.
            If the file doesn't exist it will throw a FileNotFound exception.
            Requires reading permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Write">
            <summary>
            Open a file for writing.
            If the file doesn't exist it will be created.
            If the file exists it will be truncated and start writing from the beginning.
            Requires writing permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.ReadWrite">
            <summary>
            Open a file for reading and/or writing.
            If the file doesn't exist it wll be created.
            If the file exists it will start writing from the beginning but not truncated.
            Requires reading and writing permissions.
            </summary>
        </member>
        <member name="F:Yarhl.IO.FileOpenMode.Append">
            <summary>
            Open a file for appending data at the end.
            If the file doesn't exist it will throw an exception.
            Requires writing permissions.
            </summary>
        </member>
        <member name="T:Yarhl.IO.FileOpenModeExtensions">
            <summary>
            Extensions for the FileOpenMode enumeration.
            </summary>
        </member>
        <member name="M:Yarhl.IO.FileOpenModeExtensions.ToFileMode(Yarhl.IO.FileOpenMode)">
            <summary>
            Get the equivalent <see cref="T:System.IO.FileMode"/>.
            </summary>
            <returns>The file mode.</returns>
            <param name="openMode">File open mode.</param>
        </member>
        <member name="M:Yarhl.IO.FileOpenModeExtensions.ToFileAccess(Yarhl.IO.FileOpenMode)">
            <summary>
            Get the equivalent <see cref="T:System.IO.FileAccess"/>.
            </summary>
            <returns>The file access.</returns>
            <param name="openMode">File open mode.</param>
        </member>
        <member name="T:Yarhl.IO.NumericExtension">
            <summary>
            Extension methods for numeric types.
            </summary>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int16,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt16,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int32,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt32,System.Int32)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.Int64,System.Int64)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="M:Yarhl.IO.NumericExtension.Pad(System.UInt64,System.UInt64)">
            <summary>
            Pad the specified address.
            </summary>
            <returns>The address padded.</returns>
            <param name="address">Address to pad.</param>
            <param name="padding">Padding target.</param>
        </member>
        <member name="T:Yarhl.IO.SeekMode">
            <summary>
            Seek mode for DataStream.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.Start">
            <summary>
            Position from the origin of the DataStream.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.Current">
            <summary>
            Position from the current position.
            </summary>
        </member>
        <member name="F:Yarhl.IO.SeekMode.End">
            <summary>
            Position going back from the end of the DataStream.
            </summary>
        </member>
        <member name="T:Yarhl.IO.TextReader">
            <summary>
            Text reader for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextReader.#ctor(Yarhl.IO.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <remarks>The default encoding is UTF-8.</remarks>
        </member>
        <member name="M:Yarhl.IO.TextReader.#ctor(Yarhl.IO.DataStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextReader"/> class.
            </summary>
            <param name="stream">Stream to read from.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="P:Yarhl.IO.TextReader.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Yarhl.IO.TextReader.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:Yarhl.IO.TextReader.NewLine">
            <summary>
            Gets or sets the new line and set to false AutoNewLine.
            </summary>
            <value>The new line.</value>
            <remarks>The default value is OS-dependant.</remarks>
        </member>
        <member name="P:Yarhl.IO.TextReader.AutoNewLine">
            <summary>
            Gets or sets a value indicating whether reads any kind of
            NewLine format (\r\n or \n). If true, this ignore the
            NewLine field.
            </summary>
            <returns>If true, it will treat new lines any matching of \r\n or
            \n. Otherwhise false.
            </returns>
        </member>
        <member name="M:Yarhl.IO.TextReader.Read">
            <summary>
            Read a char from the stream.
            </summary>
            <returns>The read char.</returns>
        </member>
        <member name="M:Yarhl.IO.TextReader.Read(System.Int32)">
            <summary>
            Read the specified number of chars.
            </summary>
            <returns>The read chars.</returns>
            <param name="count">Chars to read.</param>
        </member>
        <member name="M:Yarhl.IO.TextReader.ReadToToken(System.String)">
            <summary>
            Reads a string until a string / token is found.
            </summary>
            <returns>The read string.</returns>
            <param name="token">Token to find.</param>
        </member>
        <member name="M:Yarhl.IO.TextReader.ReadLine">
            <summary>
            Reads a line.
            </summary>
            <returns>The line.</returns>
        </member>
        <member name="M:Yarhl.IO.TextReader.ReadToEnd">
            <summary>
            Reads to the end.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:Yarhl.IO.TextReader.Peek">
            <summary>
            Read the next char without changing the position.
            </summary>
            <returns>The next char.</returns>
        </member>
        <member name="M:Yarhl.IO.TextReader.Peek(System.Int32)">
            <summary>
            Read the next count of chars without changing the position.
            </summary>
            <returns>The next chars.</returns>
            <param name="count">Number of chars to read.</param>
        </member>
        <member name="M:Yarhl.IO.TextReader.PeekToToken(System.String)">
            <summary>
            Read until a string / token is found without changing the position.
            </summary>
            <returns>The next chars.</returns>
            <param name="token">Token to find.</param>
        </member>
        <member name="M:Yarhl.IO.TextReader.PeekLine">
            <summary>
            Read the next line without changing the position.
            </summary>
            <returns>The next line.</returns>
        </member>
        <member name="T:Yarhl.IO.TextWriter">
            <summary>
            Text writer for DataStreams.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextWriter.#ctor(Yarhl.IO.DataStream)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <remarks>The default encoding is UTF-8.</remarks>
        </member>
        <member name="M:Yarhl.IO.TextWriter.#ctor(Yarhl.IO.DataStream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.IO.TextWriter"/> class.
            </summary>
            <param name="stream">Stream to write to.</param>
            <param name="encoding">Encoding to use.</param>
        </member>
        <member name="P:Yarhl.IO.TextWriter.Stream">
            <summary>
            Gets the stream.
            </summary>
            <value>The stream.</value>
        </member>
        <member name="P:Yarhl.IO.TextWriter.Encoding">
            <summary>
            Gets or sets the encoding.
            </summary>
            <value>The encoding.</value>
        </member>
        <member name="P:Yarhl.IO.TextWriter.NewLine">
            <summary>
            Gets or sets the new line character.
            </summary>
            <value>The new line character.</value>
            <remarks>The default value is \n, the Unix new line.</remarks>
        </member>
        <member name="M:Yarhl.IO.TextWriter.Write(System.Char)">
            <summary>
            Write the specified char.
            </summary>
            <param name="ch">Char to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextWriter.Write(System.Char[])">
            <summary>
            Write the specified chars.
            </summary>
            <param name="chars">Chars to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextWriter.Write(System.String)">
            <summary>
            Write the specified text without including a new line.
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextWriter.Write(System.String,System.Object[])">
            <summary>
            Write the specified text with format.
            </summary>
            <param name="format">Format for the text.</param>
            <param name="args">Arguments for the format.</param>
        </member>
        <member name="M:Yarhl.IO.TextWriter.WriteLine">
            <summary>
            Writes a new line.
            </summary>
        </member>
        <member name="M:Yarhl.IO.TextWriter.WriteLine(System.String)">
            <summary>
            Writes the specified text and add a new line.
            </summary>
            <param name="text">Text to write.</param>
        </member>
        <member name="M:Yarhl.IO.TextWriter.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the specified text with format.
            </summary>
            <param name="format">Format for the text.</param>
            <param name="args">Arguments of the format.</param>
        </member>
        <member name="T:Yarhl.PluginManager">
            <summary>
            Plugin manager.
            </summary>
            <remarks>
            Plugin assemblies are loaded from the directory with the Yarhl
            assembly and the 'Plugins' subfolder with its children.
            </remarks>
        </member>
        <member name="M:Yarhl.PluginManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Yarhl.PluginManager"/> class.
            </summary>
        </member>
        <member name="P:Yarhl.PluginManager.PluginDirectory">
            <summary>
            Gets the name of the plugins directory.
            </summary>
            <value>The name of the plugins directory.</value>
        </member>
        <member name="P:Yarhl.PluginManager.Instance">
            <summary>
            Gets the plugin manager instance.
            </summary>
            <remarks>It initializes the manager if needed.</remarks>
            <value>The plugin manager instance.</value>
        </member>
        <member name="M:Yarhl.PluginManager.FindExtensions``1">
            <summary>
            Finds all the extensions from the given base type.
            </summary>
            <returns>The extensions.</returns>
            <typeparam name="T">Type of the extension point.</typeparam>
        </member>
        <member name="M:Yarhl.PluginManager.FindExtensions(System.Type)">
            <summary>
            Finds all the extensions from the given base type.
            </summary>
            <returns>The extensions.</returns>
            <param name="extension">Type of the extension point.</param>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions``1">
            <summary>
            Finds all the extensions from the given base type and return their
            lazy type for initialization.
            </summary>
            <typeparam name="T">Type of the extension point.</typeparam>
            <returns>The lazy extensions.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions(System.Type)">
            <summary>
            Finds all the extensions from the given base type and returns
            a factory to initialize the type.
            </summary>
            <param name="extension">Type of the extension point.</param>
            <returns>The extension factory.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.FindLazyExtensions``2">
            <summary>
            Finds all the extensions from the given base type and returns
            a factory to initialize the type and its associated metadata.
            </summary>
            <typeparam name="T">Type of the extension point.</typeparam>
            <typeparam name="TMetadata">Type of the metadata.</typeparam>
            <returns>The extension factory.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.GetFormats">
            <summary>
            Get a list of format extensions.
            </summary>
            <returns>Enumerable of lazy formats with metadata.</returns>
        </member>
        <member name="M:Yarhl.PluginManager.GetConverters">
            <summary>
            Get a list of converter extensions.
            </summary>
            <returns>Enumerable of lazy converters with metadata.</returns>
        </member>
    </members>
</doc>
